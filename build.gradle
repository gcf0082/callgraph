plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group 'com.huawei.callgraph'
version = "0.7.5"
def projectName = "callgraph"
description = "${projectName}"
sourceCompatibility = 1.8
targetCompatibility = 1.8

def defaultEncoding = 'UTF-8'

[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

project.buildDir = 'build'



repositories {
	mavenCentral()
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}

		resources {
			srcDir 'src/main/resources'
		}
	}

	test {
		java {
			srcDir 'src/test/java'
		}

		resources {
			srcDir 'src/test/resources'
		}
	}
}

configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

List apache_common = [
		'org.apache.commons:commons-lang3:3.11',
		'commons-io:commons-io:2.8.0',
		'commons-codec:commons-codec:1.9'
]

List c3p0 = ['com.mchange:c3p0:0.9.5.5']

List mysql = ['mysql:mysql-connector-java:8.0.20']

List h2database = ["com.h2database:h2:2.1.210"]

List slf4j = ['org.slf4j:log4j-over-slf4j:1.7.30']

List bcel = ['org.apache.bcel:bcel:6.5.0']

def jackson_ver = "2.12.4"
List jackson = [
		"com.fasterxml.jackson.core:jackson-databind:$jackson_ver",
		"com.fasterxml.jackson.module:jackson-module-jaxb-annotations:$jackson_ver"
]

List dom4j = ['dom4j:dom4j:1.6.1']

List log4j = [
		'org.apache.logging.log4j:log4j-api:2.17.0',
		'org.apache.logging.log4j:log4j-core:2.17.0',
		'org.apache.logging.log4j:log4j-slf4j-impl:2.17.0'
]

List junit = ['junit:junit:4.13.2']

List spring_boot = ['org.springframework.boot:spring-boot-starter', 'org.springframework.boot:spring-boot-starter-web']

List java_sarif = ['com.contrastsecurity:java-sarif:2.0']

dependencies {
	implementation spring_boot, apache_common, c3p0, mysql, h2database, slf4j, bcel, jackson, dom4j, java_sarif
	testImplementation 'org.springframework.boot:spring-boot-starter-test', log4j, junit
}

compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

processResources {
	setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

processTestResources {
	setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

task createProject {
	doFirst {
		sourceSets*.java.srcDirs*.each { it.mkdirs() }
		sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	}
}

jar {
	from(sourceSets.test.allJava) {
		duplicatesStrategy = DuplicatesStrategy.INCLUDE
		include 'test/jacg/*.java'
		into '/'
	}
}

task test_jar(type: Jar) {
	archiveName 'test.jar'
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
	from(sourceSets.test.output) {
		include 'test/call_graph/**'
		into '/'
	}

}

// 生成可以直接执行的jar包，并拷贝相关文件
task gen_run_jar(type: Jar) {
	archiveName 'run_jacg.jar'
	from(sourceSets.main.output) {
		into '/'
	}
	from(sourceSets.test.output) {
		include 'test/jacg/**'
		into '/'
	}

	doLast{
		copy {
			from 'build/libs/run_jacg.jar'
			into 'output_dir/jar/'
		}
		copy {
			from 'src/main/resources/~jacg_config/'
			into 'output_dir/~jacg_config/'
		}
		copy {
			from 'src/main/resources/~jacg_extensions/'
			into 'output_dir/~jacg_extensions/'
		}
		copy {
			from 'src/main/resources/~jacg_find_keyword/'
			into 'output_dir/~jacg_find_keyword/'
		}
		copy {
			from 'src/main/resources/~jacg_sql/'
			into 'output_dir/~jacg_sql/'
		}
		copy {
			from 'run.bat'
			into 'output_dir/'
		}
		copy {
			from 'run.sh'
			into 'output_dir/'
		}
		copy {
			from configurations.testRuntimeClasspath
			into 'output_dir/lib'
		}
	}
}

task sourcesJar(type: Jar) {
	doFirst {
		archiveClassifier.set('sources')
		from sourceSets.main.allJava
	}
}

task javadocJar(type: Jar) {
	doFirst {
		archiveClassifier.set('javadoc')
		from javadoc.destinationDir
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId project.group
			artifactId project.name
			version "${version}"
			from components.java
			artifact sourcesJar
			artifact javadocJar

			pom {
				name = "java-all-call-graph"
				description = "Generate all call graph for Java Code."
				url = "https://github.com/Adrninistrator/java-all-call-graph"
				licenses {
					license {
						name = "The Apache License, Version 2.0"
						url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
					}
				}
				developers {
					developer {
						id = "Adrninistrator"
						name = "zhengyiee"
						email = "zhengyiee@qq.com"
					}
				}
				scm {
					connection = "scm:git:https://github.com/Adrninistrator/java-all-call-graph.git"
					developerConnection = "scm:git:https://github.com/Adrninistrator/java-all-call-graph.git"
					url = "https://github.com/Adrninistrator/java-all-call-graph"
				}
			}
		}
	}
}

signing {
	sign publishing.publications.mavenJava
}

